name: GPU2DCopyLib CI

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        #os: [ubuntu-latest, windows-latest, macos-latest]
        os: [ubuntu-latest]
        build_type: [Release, Debug]
        c_compiler: [gcc, clang, cl]
        include:
          # - os: windows-latest
          #   c_compiler: cl
          #   cpp_compiler: cl
          #   arch: x86
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            arch: x86
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            arch: x86
          # - os: macos-latest
          #   c_compiler: gcc
          #   cpp_compiler: g++-13
          #   arch: aarch64
        exclude:
        #   - os: windows-latest
        #     c_compiler: gcc
        #   - os: windows-latest
        #     c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
        #   - os: macos-latest
        #     c_compiler: cl
        #   - os: macos-latest
        #     c_compiler: clang

    steps:

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "simsycl-src-dir=${{ github.workspace }}/simsycl" >> "$GITHUB_OUTPUT"
        echo "simsycl-output-dir=${{ github.workspace }}/simsycl/build" >> "$GITHUB_OUTPUT"
        echo "simsycl-install-dir=${{ github.workspace }}/simsycl/install" >> "$GITHUB_OUTPUT"
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "tests-dir=${{ github.workspace }}/build/tests" >> "$GITHUB_OUTPUT"

    # NOTE: checkout steps delete everything, must be first
    - name: Check out GPU2DCopyLib
      uses: actions/checkout@v4

    - name: Check out SimSYCL
      uses: actions/checkout@v4
      with:
        repository: celerity/simsycl
        ref: master
        path: ${{ steps.strings.outputs.simsycl-src-dir }}

    # boost needed for SimSYCL, we don't need it for the library itself
    - name: Install boost
      uses: MarkusJx/install-boost@v2.5.0
      id: install-boost
      with:
        boost_version: 1.81.0
        arch: ${{matrix.arch}}

    # needed for some matrix combinations
    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v1
      if: matrix.cpp_compiler == 'clang++'
      with:
        version: "17"

    - name: Configure SimSYCL
      working-directory: ${{ steps.strings.outputs.simsycl-src-dir }}
      run: >
        cmake
        -D "BOOST_ROOT=${{ steps.install-boost.outputs.BOOST_ROOT }}"
        -B ${{ steps.strings.outputs.simsycl-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_POLICY_DEFAULT_CMP0144=NEW
        -S ${{ steps.strings.outputs.simsycl-src-dir }}
        -DCMAKE_INSTALL_PREFIX=${{ steps.strings.outputs.simsycl-install-dir }}

    - name: Build and install SimSYCL
      working-directory: ${{ steps.strings.outputs.simsycl-src-dir }}
      run: cmake --build ${{ steps.strings.outputs.simsycl-output-dir }} --config ${{ matrix.build_type }} --target install

    - name: Configure CMake for GPU2DCopyLib
      run: >
        cmake
        -D "BOOST_ROOT=${{ steps.install-boost.outputs.BOOST_ROOT }}"
        -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_POLICY_DEFAULT_CMP0144=NEW
        -S ${{ github.workspace }}
        -DCMAKE_PREFIX_PATH=${{ steps.strings.outputs.simsycl-install-dir }}

    - name: Build GPU2DCopyLib
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.tests-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }} --output-on-failure
